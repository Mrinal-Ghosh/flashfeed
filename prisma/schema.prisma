datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Article {
  id           String        @id @default(cuid())
  externalId   String
  source       String
  title        String
  content      String?
  url          String        @unique
  urlToImage   String?
  publishedAt  DateTime
  createdAt    DateTime      @default(now())
  category     String

  //relations
  readHistory ReadingHistory[] 
  savedBy     SavedArticle[]
}

model User {
  clerkId      String        @id
  email        String        @unique
  name         String?
  createdAt    DateTime      @default(now())

  //relations
  preferences  Preference[]
  savedArticles  SavedArticle[]
  readingHistory ReadingHistory[] 
  
}

model Preference {
  id            String    @id @default(uuid())
  user          User      @relation(fields: [userClerkId], references: [clerkId])
  userClerkId   String    @unique
  categories    String[]  @default([])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model SavedArticle {
  id            String    @id @default(uuid())
  user          User      @relation(fields: [userClerkId], references: [clerkId], onDelete: Cascade)
  userClerkId   String
  article       Article   @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId     String
  savedAt       DateTime  @default(now())

  @@unique([userClerkId, articleId])
}

model ReadingHistory {
  id            String    @id @default(uuid())
  user          User      @relation(fields: [userClerkId], references: [clerkId], onDelete: Cascade)
  userClerkId   String
  article       Article   @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId     String
  readAt        DateTime  @default(now())
}

//TODO: Implement interaction types